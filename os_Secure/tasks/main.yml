---    
###task 1: this task include "/tmp, /var, /var/tmp" section for config using fstab file
- name: Separate partition (/tmp, /var, /var/tmp... using fstab)
  ansible.builtin.template:
    src: "{{ new_fstab_path }}"
    dest: "{{ origin_fstab_path }}/fstab"
    mode: 0644
  become: true
  notify: reload-deamon
  tags: task1

##if system not mounted before, run "mount" command, else run "mount -o remount" command
# - name: remount
#   ansible.builtin.command: 
#     mount /tmp
#   become: true

##remount /tmp, /var, /var/tmp, /var/log, /var/log/audit, /home
- name: remount
  ansible.builtin.raw: 
    mount -o remount /tmp #/var/tmp; /var/log; /var/log/audit; /home
  become: true

- name: check result
  ansible.builtin.raw:
    "findmnt -nk /tmp && findmnt -nk /var && findmnt -kn /var/tmp && findmnt -kn /var/log 
    && findmnt -kn /home && findmnt -kn /dev/shm"
  register: mount_output
  
- name: display output
  ansible.builtin.debug:
    var: mount_output.stdout_lines

##reconf permission bootloader config
# chown root:root /boot/grub/grub.cfg
# chmod u-x,go-rwx /boot/grub/grub.cfg: 600
- name: reconfig permission of grub.cfg
  ansible.builtin.file:
    path: "{{ boot_loader_path }}"
    owner: root
    group: root
    mode: 0600
  become: true

##process hardening
- name: Ensure prelink is not installed
  ansible.builtin.apt:
    name:
      - prelink
    state: absent
    purge: true
  become: true

- name: config ASLR, ptrace_scope and some network config
  ansible.builtin.template:
    src: "{{ sysctl_src }}"
    dest: "{{ sysctl_dest }}"
    mode: 0644
  become: true

##disable apport.service (enabled=0)
- name: Ensure Automatic Error Reporting is not enabled
  ansible.builtin.template:
    src: "{{ apport_src }}"
    dest: "{{ apport_dest }}"
    mode: 0644
  become: true

# systemctl stop apport.service
# systemctl --now disable apport.service
- name: stop apport service 
  ansible.builtin.systemd:
    name: apport.service
    state: stopped
    enabled: false
  become: true
  notify: reload-deamon


##you also can just remove this service 
# - name: remove apport service
#   ansible.builtin.apt:
#     name: apport
#     state: absent
#     purge: true
#   become: true

##Mandatory access control
##AppArmor provides a Mandatory Access Control (MAC)
- name: install AppArmor
  ansible.builtin.apt:
    name:
      - apparmor
      - apparmor-utils
    state: latest
  become: true

#GRUB_CMDLINE_LINUX="apparmor=1 security=apparmor"
- name: config AppArmor
  ansible.builtin.template:
    src: "{{ grub_src }}"
    dest: "{{ grb_dest }}"
    mode: 0644
  become: true
  notify: update-grub

## apparmor_status | grep profiles
## apparmor_status | grep processes
##set enforce mode or complain mode
##aa-enforce /etc/apparmor.d/*
#or
##aa-complain /etc/apparmor.d/*
- name: set enforce mode
  ansible.builtin.raw: aa-enforce /etc/apparmor.d/*
  become: true
#or
# - name: set complain mode
#   ansible.builtin.raw: aa-complain /etc/apparmor.d/*
#   become: true

##Command Line Warning Banners
- name: Ensure local login warning banner is configured properly
  ansible.builtin.template:
    src: "{{ issue_net_src }}"
    dest: "{{ issue_net_dest }}"
    mode: 0600
    owner: root
    group: root
  become: true

##Ensure permissions on /etc/motd are configured

##solution 1
# - name: Check if /etc/motd exists
#   ansible.builtin.stat:
#     path: "{{ motd_path }}"
#   register: motd_file_info
#   # Ignore errors if the file doesn't exist
#   ignore_errors: yes
#   tags: test

# - name: show output
#   ansible.builtin.debug:
#     var: motd_file_info
#   tags: test2

# - name: task 8 - Ensure permissions on /etc/motd are configured
#   ansible.builtin.file:
#     path: "{{ motd_path }}"
#     owner: root
#     group: root
#     mode: 0600
#   become: true
#   when: motd_file_info.stat.exists == true

##solution 2
- name: Ensure permissions on /etc/motd are configured
  ansible.builtin.file:
    path: "{{ motd_path }}"
    state: absent
  become: true

##GNOME Display Manager (testing: if run apt purge gdm3 -> remove GNOME GUI of ubuntu)
# - name: uninstall gdm3 (use this for non gui environment)
#   ansible.builtin.apt:
#     name: gdm3
#     state: absent
#     purge: true
#   become: true

- name: Ensure XDCMP is not enabled
  ansible.builtin.template:
    src: "{{ XDMCP_custom_src }}"
    dest: "{{ XDMCP_custom_dest }}"
    mode: 0644
    owner: root
    group: root
  become: true

##Configure Time Synchronization
##ensure just 1 in 3 time sync in use: NTP, chrony, systemd-timesyncd.service
#case 1: use chrony
# - name: task 10 - use chrony 
#   ansible.builtin.apt:
#     name: chrony
#     state: latest
#   become: true
#   notify:
#     - disable-systemd-timesyncd.service
#     - uninstall-NTP
#   ignore_errors: true  #some service will return error if not exists when uninstall

#case 2: use systemd-timesyncd.service
- name: use systemd-timesyncd.service
  ansible.builtin.systemd:
    name: systemd-timesyncd.service
    state: started
  become: true
  notify:
    - uninstall-chrony
    - uninstall-NTP
  ignore_errors: true  #some service will return error if not exists when uninstall

# #case 3: use NTP (need to config)
# - name: task 10 - use NTP 
#   ansible.builtin.apt:
#     name: ntp
#     state: latest
#   become: true
#   notify:
#     - uninstall-chrony
#     - disable-systemd-timesyncd.service
#   ignore_errors: true  #some service will return error if not exists when uninstall

#task: config chrony, Ensure chrony is running as user _chrony
#task: Ensure chrony is running as user _chrony
#task: config systemd-timesyncd.service
#task: config ntp 
#task: Ensure ntp is configured with authorized timeserver
#task: Ensure ntp is running as user ntp 

##Ensure X Window System is not installed (do not run this task if you need GUI to use)
# - name: task - Ensure X Window System is not installed (do not run if still need GUI)
#   ansible.builtin.apt:
#     name: xserver-xorg*
#     state: absent
#     purge: true
#   become: true

##Ensure Avahi Server is not installed 
- name: stop avahi-daemon service 
  ansible.builtin.systemd:
    name: avahi-daaemon.service
    state: stopped
  become: true
  ignore_errors: true

- name: stop avahi-daemon.socket
  ansible.builtin.systemd:
    name: avahi-daemon.socket
    state: stopped
  become: true
  ignore_errors: true

- name: Ensure Avahi Server is not installed 
  ansible.builtin.apt:
    name: avahi-daemon
    state: absent
    purge: true
  become: true
  ignore_errors: true

##Ensure Common Unix Print System (CUPS) is not installed
- name: Ensure Common Unix Print System (CUPS) is not installed (don't run this task if need to use this service)
  ansible.builtin.apt:
    name: cups 
    state: absent
    purge: true
  become: true

##Ensure some insecure packages is not installed
- name: uninstall some unsecure packages 
  ansible.builtin.apt:
    name: "{{ insecure_packages }}"
    state: absent
    purge: true
  become: true
  tags: testing
  ignore_errors: true

##network config (reboot may be required for this task)
- name: disable bluetooth
  ansible.builtin.systemd:
    name: bluetooth.service
    state: stopped
    masked: true
  become: true

#if need to use this host firewall, run this task
- name: install ufw firewall (just use only ufw or nftable)
  ansible.builtin.apt:
    name: ufw
    state: latest
  become: true
  notify: 
    - start-ufw
    - config-ufw-loopback-traffic
    - uninstall-iptables-persistent
    - uninstall-nftables

# - name: install nftables (just use only ufw or nftable)
#   ansible.builtin.apt:
#     name: nftables
#     state: latest
#   become: true
#   notify:
#     - enalbe-nftables
#     - config-nftables-loopback-traffic 
#     - uninstall-ufw
#     - flushed-iptables
#   ignore_errors: true
##Ensure nftables rules are permanent?

##config iptables
# - name: install iptables (just use only ufw or nftable)
#   ansible.builtin.apt:
#     name:
#       - iptables 
#       - iptables-persistent
#     state: latest
#   become: true
#   notify: 
#     - config-iptables-loopback-traffic
#     - config-ipv6-loopback-traffic
#     - uninstall-nftables
#     - stop-ufw-service
#   ignore_errors: true

##Access, Authentication and Authorization
##cron config
- name: enabled cron.service
  ansible.builtin.systemd:
    name: cron.service
    state: started
    enabled: true
    masked: false
  become: true

- name: set appropriate permission
  ansible.builtin.file:
    path: "{{ cron_tab_path }}/{{ item }}"
    mode: og-rwx
  loop: "{{ cron_files_name }}"
  become: true

##config ssh 
- name: Ensure permissions on /etc/ssh/sshd_config are configured
  ansible.builtin.file:
    path: "{{ ssh_config_file_path }}"
    owner: root
    group: root
    state: directory
    recurse: true
    mode: 0600
  become: true

##Ensure SSH access is limited ??

- name: config sshd_config 
  ansible.builtin.template:
    src: "{{ sshd_src }}"
    dest: "{{ sshd_dest }}"
    owner: root
    group: root
    mode: 0600
  become: true
  handlers: restart-ssh

##privilege escalation
- name: config sudoers
  ansible.builtin.template:
    src: "{{ sudoers_src }}"
    dest: "{{ sudoers_dest }}"
    owner: root
    group: root
    mode: 0440
  become: true

#config PAM 
- name: Check if pam_pwquality.so exists
  ansible.builtin.stat:
    path: "{{ libpam_modules_path }}/pam_pwquality.so"  # Update the path if needed
  register: pwquality_file

- name: Install pam_pwquality package if not present
  ansible.builtin.apt:  # Use 'ansible.builtin.apt' if you are using a Debian-based system
    name: libpam-pwquality
    state: present
  when: pwquality_file.stat.exists == false

- name: Print a message if pam_pwquality.so was installed
  debug:
    msg: "pam_pwquality.so has been installed."
  when: pwquality_file.stat.exists == false

- name: config pam_pwquality
  ansible.builtin.template:
    src: "{{ pwquality_src }}"
    dest: "{{ pwquality_dest }}"
    owner: root
    group: root
    mode: 0644
  become: true
  notify: include-common-password

- name: Ensure lockout for failed password attempts is configured
  ansible.builtin.template:
    src: "{{ common_auth_src }}"
    dest: "{{ common_auth_dest }}"
    owner: root
    group: root
    mode: 0644
  become: 
  notify: inactive-passwd-lock

- name: Ensure default group for the root account is GID 0
  ansible.builtin.shell: usermod -g 0 root
  become: true

- name: config login.def
  ansible.builtin.template:
    src: "{{ login_def_src }}"
    dest: "{{ login_def_dest }}"
    owner: root
    group: root
    mode: 0644
  become: true
  notify: config-common-session

- name: /etc/shells without nologin
  ansible.builtin.lineinfile:
    path: /etc/shells
    regexp: '.*nologin.*'
    state: absent
  become: true

##audit and logging
##Ensure systemd-journal-remote is installed
##un-comment to use this task
- name: install systemd-journal-remote
  ansible.builtin.apt:
    name: systemd-journal-remote
    state: latest
  become: true

- name: config systemd-journal-remote
  ansible.builtin.template:
    src: "{{ journal_upload_src }}"
    dest: "{{ journal_upload_dest }}"
    owner: root
    group: root
    mode: 0644
  become: true
  notify: 
    - start-systemd-journal-upload
    - not-receive-remote-log

- name: config journald.conf 
  ansible.builtin.template:
    src: "{{ journald_conf_src }}"
    dest: "{{ journald_conf_dest }}"
    owner: root
    group: root
    mode: 0644
  become: true
  notify: restart-systemd-journald

##nsure rsyslog is configured
##un-comment to use this task
# - name: install rsyslog
#   ansible.builtin.apt:
#     name: rsyslog
#     state: latest
#   become: true
#   notify: enabled-rsyslog

# - name: config rsyslog
#   ansible.builtin.template:
#     src: "{{ rsyslog_src }}"
#     dest: "{{ rsyslog_dest }}"
#     owner: root
#     group: root
#     mode: 0644
#   become: true
#   notify: enabled-

##Configure System Accounting (auditd)
- name: install auditd 
  ansible.builtin.apt:
    name: auditd
    state: latest
  become: true
  notify: enabled-auditd

- name: config auditd.conf 
  ansible.builtin.template:
    src: "{{ auditd_src }}"
    dest: "{{ auditd_dest }}"
    owner: root
    group: root
    mode: 0640
  become: true

##system file permissions
##/etc/passwd
- name: config /etc/passwd 
  ansible.builtin.file:
    path: /etc/passwd
    owner: root
    group: root
    mode: 0644
  become: true

- name: config /etc/passwd 
  ansible.builtin.file:
    path: /etc/passwd-
    owner: root
    group: root
    mode: 0644
  become: true

##/etc group
- name: config /etc/group 
  ansible.builtin.file:
    path: /etc/group
    owner: root
    group: root
    mode: 0644
  become: true

- name: config /etc/group- 
  ansible.builtin.file:
    path: /etc/group-
    owner: root
    group: root
    mode: 0644
  become: true

##/etc/shadow 
- name: config /etc/shadow 
  ansible.builtin.file:
    path: /etc/shadow
    owner: root
    group: root
    mode: 0640
  become: true

- name: config /etc/shadow- 
  ansible.builtin.file:
    path: /etc/shadow-
    owner: root
    group: root
    mode: 0640
  become: true

##/etc/gshadow
- name: config /etc/gshadow
  ansible.builtin.file:
    path: /etc/gshadow
    owner: root
    group: root
    mode: 0640
  become: true

- name: config /etc/gshadow-
  ansible.builtin.file:
    path: /etc/gshadow-
    owner: root
    group: root
    mode: 0640
  become: true

##/etc/shells
- name: config /etc/shells
  ansible.builtin.file:
    path: /etc/shells
    owner: root
    group: root
    mode: 0640
  become: true

##/etc/security/opasswd.old
# - name: config /etc/security/opasswd.old
#   ansible.builtin.file:
#     path: /etc/security/opasswd.old
#     owner: root
#     group: root
#     mode: 0600
#   become: true

##Ensure root is the only UID 0 account
- name: Find users with UID 0 other than root
  ansible.builtin.shell: 
    "getent passwd | awk -F':' '$3 == 0 && $1 != \"root\" { print $1 }'"
  register: users_to_remove
  changed_when: false
  check_mode: no 

- name: Remove users with UID 0 other than root
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
  with_items: "{{ users_to_remove.stdout_lines }}"
  when: users_to_remove.stdout_lines | length > 0
  become: true