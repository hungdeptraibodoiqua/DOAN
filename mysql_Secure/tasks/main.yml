---
###tasks file for mysql_Secure
###using CIS benmark for hardening mysql server###

###include credential file
#store 2 variables: mysql_root_username and mysql_root_password
#it will be encrypted by ansible-vault
#sudo apt-get install libmysqlclient21

- name: include credential mysql var file
  ansible.builtin.include_vars:
    file: /home/hung/Desktop/DOAN/mysql_credential.yml

###task 1:check mysql and print version installed
- name: Get MySQL version
  ansible.builtin.command:
    mysql --version
  register: mysql_version

- name: show output
  ansible.builtin.debug:
    var: mysql_version.stdout

###task 2: Create a user which is only used for running MariaDB, This user must not have administrative rights to the system
- name: check least privileges user for mysql is exists
  ansible.builtin.raw: 'ps -ef | egrep "^mysql.*$"'
  register: user_for_operate_mysql
  changed_when: false

- name: show output
  ansible.builtin.debug:
    var: user_for_operate_mysql.stdout_lines

- name: create if non-exists
  ansible.builtin.raw: 
      '/usr/sbin/groupadd -g 27 -o -r mysql >/dev/null 2>&1 || : 
      /usr/sbin/useradd -M -N -g mysql -o -r -d /var/lib/mysql -s /bin/false \ 
      -c "Sysql Server" -u 27 mysql >/dev/null 2>&1 || :'
  when: user_for_operate_mysql.failed
  become: true

###task 3: prevent interactive login
##getent: Get entries from administrative database.
###When created, the MySQL user may have interactive access to the operating system,
###which means that the MySQL user could login to the host as any other user would
- name: interactive login
  ansible.builtin.raw:
    'getent passwd mysql | egrep "^.*[\/bin\/false|\/sbin\/nologin]$"'  ###Lack of output implies a fail
  register: interact_login
  changed_when: false
  become: true

- name: show output
  ansible.builtin.debug:
    var: interact_login.stdout_lines

###re-config
- name: re-config
  ansible.builtin.raw: 'usermod -s /bin/false mysql'  #or can use this: usermod -s /sbin/nologin mysql
  when: "'/bin/false' not in interact_login.stdout_lines and '/sbin/nologin' not in interact_login.stdout_lines"
  become: true

###task 4: check /var/lib/mysql file
- name: check /var/lib/mysql
  ansible.builtin.stat:
    path: "{{ mysql_datadir }}"
  register: mysql_datadi

- name: show output
  ansible.builtin.debug:
    var: mysql_datadir.stat.exists

####task 4: Create datadir for mysql if it does not exist
- name: Create datadir if it does not exist
  ansible.builtin.file:
    path: "{{ mysql_datadir }}"
    state: directory
    owner: mysql
    group: mysql
    mode: 0750
  when: not mysql_datadir.stat.exists

###task 5: Ensure 'data-dir (/var/lib/mysql)' Has Appropriate Permissions 
- name: right perms for mysql data dir
  ansible.builtin.file:
    path: /var/lib/mysql
    state: directory
    recurse: true
    mode: 0750
  when: mysql_datadir.stat.exists == true

###task 6 :check slow_query_log
- name: check status of slow query log
  ansible.builtin.stat:
     path: "{{ mysql_slow_query_log_file }}"
  register: slow_query_log_status

- name: show output
  debug:
    var: slow_query_log_status | bool

- name: config appropriate permission if exists
  ansible.builtin.file:
    path: "{{ mysql_slow_query_log_file }}"
    mode: 0660
    owner: root 
    group: root
  when: (slow_query_log_status | bool) == true
  become: true

###task 7: binlog file
###with /var/lib/mysql/binlog
- name: Check if binlog files exist
  ansible.builtin.find:
     paths: "{{ log_bin_basename }}" 
     patterns: "binlog.*"
  register: binlog_files
  become: true

- name: Check if binlog files exist
  ansible.builtin.fail:
    msg: "Binlog files are not exist"
  when: binlog_files.matched == 0

- name: Set permissions on binlog files
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: "0660"
  loop: "{{ binlog_files.files }}"
  become: true
  
#task 8: Ensure mysql error log file Have Appropriate Permissions
- name: Check if MySQL error log file exists
  ansible.builtin.stat:
    path: "{{ error_log_file }}"
  register: log_file_info

- name: show output
  ansible.builtin.set_fact:
    mysql_error_log_exists: "{{ log_file_info.stat.exists | default(false) }}"

- ansible.builtin.debug:
    var: mysql_error_log_exists

- name: error log file permission
  ansible.builtin.file:
    path: "{{ error_log_file }}"
    owner: mysql
    group: mysql
    mode: 0600
  when: log_file_info.stat.exists == false
  become: true

###task 9: Ensure mysql relay log file Have Appropriate Permissions
- name: relay log status
  ansible.builtin.stat:
    path: "{{ relay_log_file }}"
  register: relay_log_basename
  become: true

- name: show output
  ansible.builtin.debug:
    var: relay_log_basename | bool

- name: config appropriate permission if exists
  ansible.builtin.file:
    path: "{{ relay_log_file }}"
    owner: "{{ mysql_owner }}"
    group: "{{ mysql_group }}"
    mode: 0660
  when: relay_log_basename.stat.exists == true
  become: true

###task 10: config general_log_file permission
- name: general log file status
  ansible.builtin.stat:
    path: "{{ general_log_file }}"
  register: general_log_stat
  become: true

- name: show output
  ansible.builtin.debug:
    var: general_log_stat

- name: set permission
  ansible.builtin.file:
    path: "{{ general_log_file }}"
    owner: "{{ mysql_owner }}"
    group: "{{ mysql_group }}"
    mode: 0600
  when: general_log_stat.stat.exists == true
  become: true

###task 11: change permission of plug in directory
- name: check plugin directory  
  ansible.builtin.find:
    paths: "{{ plugin_dir }}"
    recurse: yes
    file_type: file
  register: file_inside

- name: Change permissions of directory
  ansible.builtin.file:
    path: "{{ plugin_dir }}"
    mode: "0550"
  become: true

- name: Change permissions of files inside the directory
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: "0550"
  become: true
  with_items: "{{ file_inside.files }}"

###task 12: ensure Test database non-exists
- name: Find and remove databases
  ansible.builtin.mysql_db:
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_root_password }}"
    name: "{{ item }}"
    state: absent
  loop:
    - employees
    - world
    - world_x
    - sakila
    - airportdb
    - menagerie
    - test
  register: mysql_default_database
  become: true

- name: Display removal results
  ansible.builtin.debug:
     var: mysql_default_database.result

- name: show output
  ansible.builtin.debug:
    msg: "DONE"

###task 13: check if anonymous user present??
- name: check if anonymous user exists???
  community.mysql.mysql_query:
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock 
    query: "SELECT user FROM mysql.user WHERE user = '' AND host = 'localhost';"
  register: anonymous_user_result
  become: true

- name: show output
  ansible.builtin.debug:
    msg: "Anonymous MySQL user exists"
  when: not anonymous_user_result
    
###task 14: delete anonymous user 
- name: delete anonymous user if exists
  community.mysql.mysql_user:
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_root_password }}"
    name: ''
    host: localhost
    state: absent
  register: result
  when: not anonymous_user_result
  become: true

- name: show output
  ansible.builtin.debug:
    var: result
  when: not anonymous_user_result

###task 15: checking non-pass users    
- name: Get MySQL Users with No Password
  ansible.builtin.command: 
    "mysql -u{{ mysql_root_username }} -p{{ mysql_root_password }} -e 'SELECT user FROM mysql.user 
        WHERE (length(authentication_string)=0 OR authentication_string=\"\")'"
  register: mysql_users_no_password
  changed_when: false
  become: true

- name: Display MySQL Users with No Password
  ansible.builtin.debug:
    var: mysql_users_no_password.stdout | bool

###task 16: disallow remote login with root
###for login with: sudo mysql -u mysql_root_username -p
- name: Disallow root login remotely
  ansible.builtin.command: 'mysql -u{{ mysql_root_username }} -p{{ mysql_root_password }} -e "{{ item }}"'
  with_items:
    - DELETE FROM mysql.user WHERE User='{{ mysql_root_username }}' AND Host NOT IN ('localhost', '127.0.0.1')
  check_mode: false
  # changed_when: false
  become: true

###for login with: sudo mysql
# - name: Disallow root login remotely
#   ansible.builtin.command: 'mysql -NBe "{{ item }}"'
#   with_items:
#     - DELETE FROM mysql.user WHERE User='{{ mysql_root_username }}' AND Host NOT IN ('localhost', '127.0.0.1')
#   # changed_when: false
#   become: true

###task 26: uninstall deamon-memcache
###if this plugin not exists, this query will return error 1305: PLUGIN daemon_memcached does not exist
- name: uninstall deamon-memcache
  community.mysql.mysql_query:
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock 
    query: "uninstall plugin daemon_memcached;"
  ignore_errors: true
  become: true

###task 18 : password complexity (0644), Limit Failed Login Attempts and set time delay
- name: config passwd policy (length, complexity, lifetime)
  ansible.builtin.template:
    src: "{{ mysql_cnf_location }}"
    dest: /etc/mysql/mysql.conf.d/mysqld.cnf
    mode: 0644
  become: true
  notify: 
    - restart mysql 
  